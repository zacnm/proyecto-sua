package sua.autonomouscar.mapek.lite.adaptation.starter;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

import es.upv.pros.tatami.adaptation.mapek.lite.ARC.artifacts.interfaces.IAdaptiveReadyComponent;
import es.upv.pros.tatami.adaptation.mapek.lite.ARC.structures.systemconfiguration.interfaces.IComponentsSystemConfiguration;
import es.upv.pros.tatami.adaptation.mapek.lite.ARC.structures.systemconfiguration.interfaces.IRuleComponentsSystemConfiguration;
import es.upv.pros.tatami.adaptation.mapek.lite.artifacts.interfaces.IKnowledgeProperty;
import es.upv.pros.tatami.adaptation.mapek.lite.helpers.BasicMAPEKLiteLoopHelper;
import es.upv.pros.tatami.adaptation.mapek.lite.helpers.SystemConfigurationHelper;
import es.upv.pros.tatami.osgi.utils.interfaces.ITimeStamped;

import sua.autonomouscar.driving.l3.highwaychauffer.L3_HighwayChaufferARC;
import sua.autonomouscar.driving.parkintheroadshoulderfallbackplan.ParkInTheRoadShoulderFallbackPlanARC;
import sua.autonomouscar.infraestructure.devices.ARC.DistanceSensorARC;
import sua.autonomouscar.infraestructure.devices.ARC.EngineARC;
import sua.autonomouscar.infraestructure.devices.ARC.HumanSensorsARC;
import sua.autonomouscar.infraestructure.devices.ARC.LineSensorARC;
import sua.autonomouscar.infraestructure.devices.ARC.RoadSensorARC;
import sua.autonomouscar.infraestructure.devices.ARC.SteeringARC;
import sua.autonomouscar.infraestructure.driving.ARC.L3_DrivingServiceARC;
import sua.autonomouscar.infraestructure.interaction.ARC.AuditorySoundARC;
import sua.autonomouscar.infraestructure.interaction.ARC.NotificationServiceARC;
import sua.autonomouscar.interfaces.ERoadStatus;
import sua.autonomouscar.interfaces.ERoadType;
import sua.autonomouscar.mapeklite.adaptation.resources.enums.EFuncionConduccion;
import sua.autonomouscar.mapeklite.adaptation.resources.enums.ENivelAutonomia;
import sua.autonomouscar.mapeklite.adaptation.resources.monitors.MonitorEstadoVia;
import sua.autonomouscar.mapeklite.adaptation.resources.monitors.MonitorTipoVia;
import sua.autonomouscar.mapeklite.adaptation.resources.probes.SondaEstadoVia;
import sua.autonomouscar.mapeklite.adaptation.resources.probes.SondaTipoVia;
import sua.autonomouscar.mapeklite.adaptation.resources.rules.TransitionHighwayToTrafficJamAdaptationRule;

public class Activator implements BundleActivator {

	private static BundleContext context;

	static BundleContext getContext() {
		return context;
	}

	public void start(BundleContext bundleContext) throws Exception {
		Activator.context = bundleContext;
		
		BasicMAPEKLiteLoopHelper.BUNDLECONTEXT = bundleContext;
		BasicMAPEKLiteLoopHelper.REFERENCE_MODEL = "AutonomousCar";

		// ... adding the initial system configuration
		IComponentsSystemConfiguration theInitialSystemConfiguration = 
				SystemConfigurationHelper.createSystemConfiguration("InititalConfiguration");
		SystemConfigurationHelper.addComponent(theInitialSystemConfiguration, "device.RoadSensor", "1.0.0");
		BasicMAPEKLiteLoopHelper.INITIAL_SYSTEMCONFIGURATION = theInitialSystemConfiguration;

		BasicMAPEKLiteLoopHelper.MODELSREPOSITORY_FOLDER = System.getProperty("modelsrepository.folder");
		BasicMAPEKLiteLoopHelper.ADAPTATIONREPORTS_FOLDER = System.getProperty("adaptationreports.folder");
		
		// STARTING THE MAPE-K LOOP
		BasicMAPEKLiteLoopHelper.startLoopModules();
		
		BasicMAPEKLiteLoopHelper.addInitialSelfConfigurationCapabilities(createInitialSystemConfiguration());
		
		// ADAPTATION PROPERTIES
		IKnowledgeProperty kp_tipoVia = BasicMAPEKLiteLoopHelper.createKnowledgeProperty("tipo-via");
		kp_tipoVia.setValue(ERoadType.HIGHWAY);
		
		IKnowledgeProperty kp_estadoVia = BasicMAPEKLiteLoopHelper.createKnowledgeProperty("estado-via");
		kp_estadoVia.setValue(ERoadStatus.FLUID);

		IKnowledgeProperty kp_nivelAutonomia = BasicMAPEKLiteLoopHelper.createKnowledgeProperty("nivel-autonomia");
		kp_nivelAutonomia.setValue(ENivelAutonomia.L3_AutomatizacionCondicional);

		IKnowledgeProperty kp_funcionConduccion = BasicMAPEKLiteLoopHelper.createKnowledgeProperty("funcion-conduccion");
		kp_funcionConduccion.setValue(EFuncionConduccion.L3_HighwayChauffer);
		
		// ADAPTATION RULES
 		BasicMAPEKLiteLoopHelper.deployAdaptationRule(new TransitionHighwayToTrafficJamAdaptationRule(bundleContext));		
 		
		// MONITORS
		IAdaptiveReadyComponent monitorTipoVia = BasicMAPEKLiteLoopHelper.deployMonitor(new MonitorTipoVia(bundleContext));	
		IAdaptiveReadyComponent monitorEstadoVia = BasicMAPEKLiteLoopHelper.deployMonitor(new MonitorEstadoVia(bundleContext));		

		// PROBES
		BasicMAPEKLiteLoopHelper.deployProbe(new SondaTipoVia(bundleContext), monitorTipoVia);
		BasicMAPEKLiteLoopHelper.deployProbe(new SondaEstadoVia(bundleContext), monitorEstadoVia);
	}

	public void stop(BundleContext bundleContext) throws Exception {
		Activator.context = null;
	}
	
//	protected IRuleComponentsSystemConfiguration createInitialSystemConfiguration() {
//		IRuleComponentsSystemConfiguration initialSystemConfiguration = 
//				SystemConfigurationHelper.createPartialSystemConfiguration("InitialConfiguration_" + ITimeStamped.getCurrentTimeStamp());
//	
//		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.Engine", "1.0.0");
//		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.Steering", "1.0.0");
//
//		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "driving.L0.ManualDriving", "1.0.0");
//		
//		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "interaction.NotificationService", "1.0.0");
//		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "interaction.Speakers.AuditorySound", "1.0.0");
//		
//		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
//				"interaction.NotificationService", "1.0.0", NotificationServiceARC.REQUIRED_SERVICE,
//				"interaction.Speakers.AuditorySound", "1.0.0", AuditorySoundARC.PROVIDED_MECHANISM);
//		
//		return initialSystemConfiguration;
//	}

	protected IRuleComponentsSystemConfiguration createInitialSystemConfiguration() {
		IRuleComponentsSystemConfiguration initialSystemConfiguration = 
				SystemConfigurationHelper.createPartialSystemConfiguration("InitialConfiguration_" + ITimeStamped.getCurrentTimeStamp());

		// ADD COMPONENTS
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.Engine", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.Steering", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.RoadSensor", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.FrontDistanceSensor", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.LeftDistanceSensor", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.RearDistanceSensor", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.RightDistanceSensor", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.LeftLineSensor", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.RightLineSensor", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "device.HumanSensors", "1.0.0");
		
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "driving.FallbackPlan.ParkInTheRoadShoulder", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "driving.L3.HighwayChauffer", "1.0.0");
		
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "interaction.NotificationService", "1.0.0");
		SystemConfigurationHelper.componentToAdd(initialSystemConfiguration, "interaction.Speakers.AuditorySound", "1.0.0");
		
		// ADD BINDINGS
		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"interaction.NotificationService", "1.0.0", NotificationServiceARC.REQUIRED_SERVICE,
				"interaction.Speakers.AuditorySound", "1.0.0", AuditorySoundARC.PROVIDED_MECHANISM);
		
		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_ENGINE,
				"device.Engine", "1.0.0", EngineARC.PROVIDED_DEVICE);

		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_STEERING,
				"device.Steering", "1.0.0", SteeringARC.PROVIDED_DEVICE);

		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_ROADSENSOR,
				"device.RoadSensor", "1.0.0", RoadSensorARC.PROVIDED_SENSOR);
		
		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_FRONTDISTANCESENSOR,
				"device.FrontDistanceSensor", "1.0.0", DistanceSensorARC.PROVIDED_SENSOR);
		
		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_LEFTDISTANCESENSOR,
				"device.LeftDistanceSensor", "1.0.0", DistanceSensorARC.PROVIDED_SENSOR);
		
		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_REARDISTANCESENSOR,
				"device.RearDistanceSensor", "1.0.0", DistanceSensorARC.PROVIDED_SENSOR);
		
		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_RIGHTDISTANCESENSOR,
				"device.RightDistanceSensor", "1.0.0", DistanceSensorARC.PROVIDED_SENSOR);
		
		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_LEFTLINESENSOR,
				"device.LeftLineSensor", "1.0.0", LineSensorARC.PROVIDED_SENSOR);

		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_RIGHTLINESENSOR,
				"device.RightLineSensor", "1.0.0", LineSensorARC.PROVIDED_SENSOR);

		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_HUMANSENSORS,
				"device.HumanSensors", "1.0.0", HumanSensorsARC.PROVIDED_SENSOR);

		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_NOTIFICATIONSERVICE,
				"interaction.NotificationService", "1.0.0", NotificationServiceARC.PROVIDED_SERVICE);
		
		SystemConfigurationHelper.bindingToAdd(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_HighwayChaufferARC.REQUIRED_FALLBACKPLAN,
				"driving.FallbackPlan.ParkInTheRoadShoulder", "1.0.0", ParkInTheRoadShoulderFallbackPlanARC.PROVIDED_DRIVINGSERVICE);
		
		// SET PARAMETERS
		SystemConfigurationHelper.setParameter(initialSystemConfiguration, 
				"driving.L3.HighwayChauffer", "1.0.0", L3_DrivingServiceARC.PARAMETER_REFERENCESPEED, "100");
		
		return initialSystemConfiguration;
	}
	
//	protected IRuleComponentsSystemConfiguration createInitialSystemConfiguration() {
//		
//		IRuleComponentsSystemConfiguration theInitialSystemConfiguration = SystemConfigurationHelper.createPartialSystemConfiguration("InitialConfiguration_" + ITimeStamped.getCurrentTimeStamp());
//			
//		//
//		// ... adding and removing components examples ...
//		// SystemConfigurationHelper.componentToAdd or SystemConfigurationHelper.componentToRemove
//		//		systemconfiguration :  una IRuleComponentsSystemConfiguration donde se añadirán o eliminarán los componentes
//		//		component-id		:  nombre del compopnente a añadir o quitar
//		//		component-version	:  versión del componente
//		
//		// Ejemplo 1: Añadimos los componentes "device.RoadSensor" y "device.Engine", y eliminamos el componente "device.Steering" ...
//		SystemConfigurationHelper.componentToAdd(theInitialSystemConfiguration, "device.RoadSensor", "1.0.0");
//		SystemConfigurationHelper.componentToAdd(theInitialSystemConfiguration, "device.Engine", "1.0.0");
//		SystemConfigurationHelper.componentToRemove(theInitialSystemConfiguration, "device.Steering", "1.0.0");
//		
//		// Ejemplo 2: ... y añadimos el servicio "driving.FallbackPlan.Emergency", que representa al fallback plan de emergencia
//		SystemConfigurationHelper.componentToAdd(theInitialSystemConfiguration, "driving.FallbackPlan.Emergency", "1.0.0");
//		
//		
//		
//		//
//		// ... adding and removing binding examples ...
//		// SystemConfigurationHelper.bindingToAdd or SystemConfigurationHelper.bindingToRemove
//		//		systemconfiguration   :  una IRuleComponentsSystemConfiguration donde se añadirán o eliminarán los componentes
//		//		req-component-id	  :  nombre del componente que requiere la conexión
//		//		req-component-version :  versión del componente que requiere la conexión
//		//		req-component-interfaz:  interfaz requerida del componente
//		//      prov-component-id	  :  nombre del componente que provee la conexión
//		//		prov-component-version:  versión del componente que provee la conexión
//		//		prov-component-interfaz:  interfaz proporcionada del componente
//		
//		// Ejemplo 3: Conectar el componente "driving.FallbackPlan.Emergency" (a través de su interfaz requerida "required_engine")
//		//    con el componente "device.Engine" (a través de su interfaz proporcionada "provided_device")
//		SystemConfigurationHelper.bindingToAdd(theInitialSystemConfiguration, 
//				"driving.FallbackPlan.Emergency", "1.0.0", FallbackPlanARC.REQUIRED_ENGINE,
//				"device.Engine", "1.0.0", EngineARC.PROVIDED_DEVICE);
//
//		// Ejemplo 4: Desconectar del componente "driving.FallbackPlan.Emergency" (en su interfaz requerida "required_steering")
//		//    del componente "device.Steering" (a través de su interfaz proporcionada "provided_device")
//		SystemConfigurationHelper.bindingToRemove(theInitialSystemConfiguration, 
//				"driving.FallbackPlan.Emergency", "1.0.0", FallbackPlanARC.REQUIRED_STEERING,
//				"device.Steering", "1.0.0", SteeringARC.PROVIDED_DEVICE);
//
//		
//		//
//		// ... setting parameters examples ...
//		// SystemConfigurationHelper.setParameter
//		//		systemconfiguration   :  una IRuleComponentsSystemConfiguration donde se añadirán el set parameter
//		//		component-id		  :  nombre del componente
//		//		component-version	  :  versión del componente
//		//		parameter-id		  :  nombre del parámetro
//		//		parameter-value		  :  valor del parámetro
//		
//		// Ejemplo 5: Establecer el parámetro "referencespeed" a 100Km/h del servicio de conducción "driving.L3.HighwayChauffer"
//		SystemConfigurationHelper.setParameter(theInitialSystemConfiguration, 
//				"driving.L3.HighwayChauffer", "1.0.0", L3_DrivingServiceARC.PARAMETER_REFERENCESPEED, "100");
//		// * El servicio de conducción "driving.L3.HighwayChauffer" puede no estar activo en este momento, y por tanto
//		//   este 'set parameter' puede que no provoque ningún cambio de manera efectiva.
//		//   Si quisiéramos que el servicio "driving.L3.HighwayChauffer" estuviera activo, deberíamos añadirlo como en el Ejemplo 2
//		// ...
//
//		return theInitialSystemConfiguration;
//		
//	}
}
